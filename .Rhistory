arquivo2 <- iconv(arquivo, from="", to="utf-8")
#install.packages("wordcloud")
#install.packages("tm")
require("wordcloud")
require("tm")
doc <- Corpus(VectorSource(arquivo2))
doc <- tm_map(doc,removePunctuation)
doc <- tm_map(doc,tolower)
doc <- tm_map(doc,removeWords,c(stopwords("portuguese"),"hoje","atenção","parte","bom","pena","link","moro","vibra","entrar","perder","cinco","vale","dia","oportunidade","nada","outra","conseguir","quer","falar","extremamente","todo","dizer","pro","faz","lá","cara","fala","falando","aí","bacana","olha","pô","claro","pessoal","vamos","beleza","gente","tá","pode","então","ser","aqui","bem","né","assim","só","tudo","mais","também","porque","muito","está","vai","tem","têm","tão","coisa","fazer","fazer","fiz","fui","ser","sou","era","ter","tenho","teve","terei","teria"))
wordcloud(doc, col=c("gray","black","orange","red"))
#wordcloud(doc, col=rainbow(5))
arquivo2 <- iconv(arquivo, from="", to="utf-8
arquivo2 <- iconv(arquivo, from="", to="utf-8
library(readr)
library(dplyr)
library(tm)
library(wordcloud)
arquivo <- readLines("QUESTOESGM.txt")
arquivo2 <- iconv(arquivo, from="", to="utf-8")
#install.packages("wordcloud")
#install.packages("tm")
require("wordcloud")
require("tm")
doc <- Corpus(VectorSource(arquivo2))
doc <- tm_map(doc,removePunctuation)
doc <- tm_map(doc,tolower)
doc <- tm_map(doc,removeWords,c(stopwords("portuguese"),"hoje","atenção","parte","bom","pena","link","moro","vibra","entrar","perder","cinco","vale","dia","oportunidade","nada","outra","conseguir","quer","falar","extremamente","todo","dizer","pro","faz","lá","cara","fala","falando","aí","bacana","olha","pô","claro","pessoal","vamos","beleza","gente","tá","pode","então","ser","aqui","bem","né","assim","só","tudo","mais","também","porque","muito","está","vai","tem","têm","tão","coisa","fazer","fazer","fiz","fui","ser","sou","era","ter","tenho","teve","terei","teria"))
arquivo <- readLines("QUESTOESGM.txt")
arquivo2 <- iconv(arquivo, from="", to="utf-8")
#install.packages("wordcloud")
#install.packages("tm")
require("wordcloud")
require("tm")
doc <- Corpus(VectorSource(arquivo2))
doc <- tm_map(doc,removePunctuation)
doc <- tm_map(doc,tolower)
doc <- tm_map(doc,removeWords,c(stopwords("portuguese"),"hoje","atenção","parte","bom","pena","link","moro","vibra","entrar","perder","cinco","vale","dia","oportunidade","nada","outra","conseguir","quer","falar","extremamente","todo","dizer","pro","faz","lá","cara","fala","falando","aí","bacana","olha","pô","claro","pessoal","vamos","beleza","gente","tá","pode","então","ser","aqui","bem","né","assim","só","tudo","mais","também","porque","muito","está","vai","tem","têm","tão","coisa","fazer","fazer","fiz","fui","ser","sou","era","ter","tenho","teve","terei","teria"))
wordcloud(doc, col=c("gray","black","orange","red"))
arquivo <- readLines("QUESTOESGM.txt")
arquivo2 <- iconv(arquivo, from="", to="utf-8")
#install.packages("wordcloud")
#install.packages("tm")
require("wordcloud")
require("tm")
doc <- Corpus(VectorSource(arquivo2))
doc <- tm_map(doc,removePunctuation)
doc <- tm_map(doc,tolower)
doc <- tm_map(doc,removeWords,c(stopwords("portuguese"),"hoje","atenção","parte","bom","pena","link","moro","vibra","entrar","perder","cinco","vale","dia","oportunidade","nada","outra","conseguir","quer","falar","extremamente","todo","dizer","pro","faz","lá","cara","fala","falando","aí","bacana","olha","pô","claro","pessoal","vamos","beleza","gente","tá","pode","então","ser","aqui","bem","né","assim","só","tudo","mais","também","porque","muito","está","vai","tem","têm","tão","coisa","fazer","fazer","fiz","fui","ser","sou","era","ter","tenho","teve","terei","teria"))
wordcloud(doc, col=c("gray","black","orange","red"))
help(wordcloud())
help("wordcloud()")
help("wordcloud")
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=0.35, max.words=100, random.order=FALSE))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=0.35, max.words=100, random.order=FALSE))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=0.35, max.words=100, random.order=FALSE)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=0.35, max.words=100, random.order=FALSE)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, max.words=100, random.order=FALSE)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, max.words=50, random.order=FALSE)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1)
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, random.order=FALSE, scale=c(5,0.5))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, random.order=FALSE, scale=c(4,0.5))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, random.order=FALSE, scale=c(4,1))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, random.order=FALSE, scale=c(3,0.2))
wordcloud(doc, col=c("gray","black","orange","red"), rot.per=-1, random.order=FALSE, scale=c(4,0.2))
install.packages("RInno")
install.packages("RInno")
install.packages("RInno")
install.packages("remotes"); require(remotes)
# Use install_github to get RInno
install_github("ficonsulting/RInno")
shiny::runApp('Legislacoes-Mais-Militar')
runApp('VISUALIZACOES')
runApp('Legislacoes-Mais-Militar')
runApp('VISUALIZACOES')
# --- SCRIPT PARA CRIAR O INSTALADOR ---
# 1. Carregar o pacote RInno
# Se não estiver instalado, execute: install.packages("RInno")
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
# É muito importante que todos os pacotes listados em app_visualizacao.R estejam aqui.
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
# Ela irá criar uma pasta "RInno" com a estrutura do projeto.
create_app(
app_name = "app",        # O nome do seu programa
app_dir = ".",                       # "." significa que a app está na pasta atual
pkgs = pacotes_necessarios,          # A lista de pacotes a incluir
include_R = TRUE                     # Inclui uma versão portátil do R no instalador
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
create_app(
app_name = "app",
app_dir = ".",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ADICIONADA PARA CORRIGIR O ERRO ---
# Especifica manualmente a versão do R a ser incluída.
R_version = "4.5"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
create_app(
app_name = "app",
app_dir = ".",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ADICIONADA PARA CORRIGIR O ERRO ---
# Especifica manualmente a versão do R a ser incluída.
R_version = "4.3.2"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
create_app(
app_name = "app",
app_dir = ".",
pkgs = pacotes_necessarios,
include_R = TRUE
)
install.packages("remotes")
remotes::install_github("ficonsulting/RInno")
remotes::install_github("ficonsulting/RInno", forte=TRUE)
# --- SCRIPT PARA CRIAR O INSTALADOR ---
library(RInno)
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
create_app(
app_name = "app",
app_dir = ".",
pkgs = pacotes_necessarios,
include_R = TRUE,
R_version = "4.3.2" # Manter esta linha é uma boa segurança
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
create_app(
app_name = "app",
app_dir = ".",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ADICIONADA PARA CORRIGIR O ERRO ---
# Especifica manualmente a versão do R a ser incluída.
R_version = "4.5"
)
# Ficheiro: run.R
# Lista de pacotes necessários
pacotes <- c("shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs")
# Instala os pacotes que ainda não estão instalados
pacotes_a_instalar <- pacotes[!(pacotes %in% installed.packages()[,"Package"])]
if(length(pacotes_a_instalar)) {
install.packages(pacotes_a_instalar, repos = "https://cran.rstudio.com/")
}
# Carrega a aplicação Shiny
shiny::runApp(".", launch.browser = TRUE)
library(RInno)
# 1. Instala o Inno Setup se ainda não estiver disponível
RInno::install_inno()
# 2. Cria o instalador do app
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/caminho/para/ControleLeis",  # coloque aqui o caminho completo
R_version = paste(R.version$major, R.version$minor, sep = ".")
)
library(RInno)
# 1. Instala o Inno Setup se ainda não estiver disponível
RInno::install_inno()
# 2. Cria o instalador do app
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "app.r",  # coloque aqui o caminho completo
R_version = paste(R.version$major, R.version$minor, sep = ".")
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:\Users\Usuario\Documents\Mais-Militar\VISUALIZACOES\app.R",  # <<< caminho da pasta, não o arquivo app.R
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES/app.R",  # <<< caminho da pasta, não o arquivo app.R
R_version = paste(R.version$major, R.version$minor, sep = "."),
user_browser = "chrome"  # evita precisar do Node.js / Electron
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = paste(R.version$major, R.version$minor, sep = "."),
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = paste(R.version$major, R.version$minor, sep = "."),
R_version = "4.5",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = paste(R.version$major, R.version$minor, sep = "."),
R_version = "4.5",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = "4.5",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "ControleLeis",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = "4.4.1",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES/app.R",
R_version = "4.4.1",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES/app.R",
R_version = "4.4.1",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = "4.4.1",
user_browser = "chrome"  # evita precisar do Node.js
)
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = "4.4.1",
)
# Carrega o pacote RInno
library(RInno)
# Chama a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
R_version = "4.4.1",
# --- LINHA ADICIONADA PARA CORRIGIR O ERRO ---
# Instrui o RInno a usar o Chrome do utilizador em vez de tentar construir uma app com Node.js
user_browser = "chrome"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA FINAL) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ALTERADA PARA CORRIGIR O ERRO ---
# Alterado para uma versão estável e disponível no CRAN
R_version = "4.3.3",
user_browser = "chrome"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA FINAL) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ALTERADA PARA CORRIGIR O ERRO ---
# Alterado para uma versão estável e disponível no CRAN
R_version = "4.5",
user_browser = "chrome"
)
R.version
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA FINAL) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ALTERADA PARA CORRIGIR O ERRO ---
# Alterado para uma versão estável e disponível no CRAN
R_version = "5.1",
user_browser = "chrome"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA FINAL) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ALTERADA PARA CORRIGIR O ERRO ---
# Alterado para uma versão estável e disponível no CRAN
R_version = "5.1",
user_browser = "chrome"
)
# --- SCRIPT PARA CRIAR O INSTALADOR (VERSÃO CORRIGIDA FINAL) ---
# 1. Carregar o pacote RInno
library(RInno)
# 2. Listar TODOS os pacotes que a sua aplicação utiliza
pacotes_necessarios <- c(
"shiny", "dplyr", "DT", "rvest", "lubridate", "bslib",
"stringr", "xml2", "purrr", "httr", "shinyjs"
)
# 3. Chamar a função para criar os ficheiros do instalador
RInno::create_app(
app_name = "app",
app_dir  = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs = pacotes_necessarios,
include_R = TRUE,
# --- LINHA ALTERADA PARA CORRIGIR O ERRO ---
# Alterado para uma versão estável e disponível no CRAN
R_version = "4.5",
user_browser = "chrome"
)
# Atualizar RInno da fonte
remotes::install_github("ficonsulting/RInno")
# Exemplo de chamada (ajuste app_name/app_dir)
library(RInno)
# Reinstala a mesma revisão do GitHub, ignorando a verificação de SHA
remotes::install_github("ficonsulting/RInno", force = TRUE)
# 1) Limpar diretórios 00LOCK remanescentes no primeiro caminho de biblioteca
unlink(list.files(.libPaths()[1], pattern = "^00LOCK", full.names = TRUE),
recursive = TRUE, force = TRUE)
# 2) (Opcional) Atualizar magrittr separadamente para eliminar o bloqueio
install.packages("magrittr")
# 3) Verificar ferramentas de build após instalar Rtools 4.5
pkgbuild::has_build_tools(debug = TRUE)
# 4) Reinstalar RInno sem tentar atualizar dependências durante a instalação
remotes::install_github("ficonsulting/RInno", force = TRUE, upgrade = "never")
# Reinstala a mesma revisão do GitHub, ignorando a verificação de SHA
remotes::install_github("ficonsulting/RInno", force = TRUE)
# 3. Chamar a função para criar os ficheiros do instalador
# 1) Criar estrutura do instalador (Electron recomendado)
RInno::create_app(
app_name   = "app",
app_dir    = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs       = pacotes_necessarios,   # vetor de pacotes a incluir
include_R  = TRUE,                  # inclui R no instalador
user_browser = "electron",          # usar Electron (recomendado)
# Use o padrão recomendado para versão do R ou uma faixa:
# Omitir R_version para usar default ">= major.minor"
# ou definir explicitamente, por exemplo:
R_version = paste0(">=", R.version$major, ".", R.version$minor)
)
# 2) Compilar o instalador (requer Inno Setup)
RInno::compile_iss()
# 1) Definir get_R corrigida (regex amplo e comparação segura)
new_get_R <- function(app_dir = getwd(),
R_version = paste0(">=", R.version$major, ".", R.version$minor)) {
if (!dir.exists(app_dir)) stop(glue::glue("{app_dir} does not exist."), call. = FALSE)
R_version <- RInno::sanitize_R_version(R_version, clean = TRUE)
latest_R_version <- readLines("https://cran.rstudio.com/bin/windows/base/", warn = FALSE) |>
stringr::str_extract("[0-9]+\\.[0-9]+\\.[0-9]+") |>
stats::na.omit() |>
unique()
old_R_versions <- readLines("https://cran.rstudio.com/bin/windows/base/old/", warn = FALSE) |>
stringr::str_extract("[0-9]+\\.[0-9]+\\.[0-9]+") |>
stats::na.omit()
# Proteger if e usar apenas o primeiro match da página base
if (length(latest_R_version) > 0 && latest_R_version[1] == R_version) {
base_url <- glue::glue("https://cran.r-project.org/bin/windows/base/R-{R_version}-win.exe")
} else {
base_url <- glue::glue("https://cran.r-project.org/bin/windows/base/old/{R_version}/R-{R_version}-win.exe")
}
filename <- file.path(app_dir, glue::glue("R-{R_version}-win.exe"))
if (file.exists(filename)) {
cat("Using the copy of R already included:\n", filename, "\n")
} else {
cat(glue::glue("Downloading R-{R_version} ...\n"))
if (!R_version %in% c(latest_R_version, old_R_versions))
stop(glue::glue("That version of R ({R_version}) is not listed on CRAN."), call. = FALSE)
tryCatch(
curl::curl_download(base_url, filename),
error = function(e) {
cat(glue::glue("
{base_url} is not a valid URL.
This is likely to have happened because there was a change in the URL.
This might have already been fixed in the latest version of RInno. Install it with remotes::install_github('ficonsulting/RInno').
If this doesn't help please submit an issue: {packageDescription('RInno', fields = 'BugReports')}
- Thanks!"))
}
)
if (!file.exists(filename)) stop(glue::glue("{filename} failed to download."), call. = FALSE)
}
}
# 2) Definir code_section corrigida (regex amplo)
new_code_section <- function(iss,
R_version = paste0(">=", R.version$major, ".", R.version$minor)) {
if (length(R_version) == 0) {
R_version <- paste0(">=", R.version$major, ".", R.version$minor)
}
R_version <- RInno::sanitize_R_version(R_version)
R_versions <- c(
unique(stats::na.omit(stringr::str_extract(
readLines("https://cran.rstudio.com/bin/windows/base/", warn = FALSE),
"[0-9]+\\.[0-9]+\\.[0-9]+"
))),
stats::na.omit(stringr::str_extract(
readLines("https://cran.rstudio.com/bin/windows/base/old/", warn = FALSE),
"[0-9]+\\.[0-9]+\\.[0-9]+"
))
)
inequality <- substr(R_version, 1, attr(regexpr("[<>=]+", R_version), "match.length"))
R_version_clean <- gsub("[<>=]", "", R_version)
version_specs <- paste0(
"numeric_version('", R_versions, "')",
inequality,
"numeric_version('", R_version_clean, "')"
)
if (!R_version_clean %in% R_versions && interactive())
stop(glue::glue(
"R version - {R_version_clean} - was not found on CRAN. Please use `R_version` to specify one that is or open an issue:\n\nhttps://github.com/ficonsulting/RInno/issues"
), call. = FALSE)
results <- unlist(lapply(version_specs, function(x) eval(parse(text = x))))
acceptable_R_versions <- paste0(glue::glue("RVersions.Add('{R_versions[results]}');"), collapse = "\n ")
code_file <- paste0(readLines(system.file("installation/code.iss", package = "RInno")), collapse = "\n")
glue::glue('{iss}
{code_file}
// Initialize the values of supported versions
RVersions := TStringList.Create;
{acceptable_R_versions}
end;
// Procedure called by InnoSetup when it is closing
procedure DeinitializeSetup();
begin
RVersions.Free;
end;
')
}
# 3) Injetar as funções no namespace do pacote
unlockBinding("get_R", asNamespace("RInno"))
assignInNamespace("get_R", new_get_R, ns = "RInno")
lockBinding("get_R", asNamespace("RInno"))
unlockBinding("code_section", asNamespace("RInno"))
assignInNamespace("code_section", new_code_section, ns = "RInno")
lockBinding("code_section", asNamespace("RInno"))
# 3. Chamar a função para criar os ficheiros do instalador
# 1) Criar estrutura do instalador (Electron recomendado)
RInno::create_app(
app_name   = "app",
app_dir    = "C:/Users/Usuario/Documents/Mais-Militar/VISUALIZACOES",
pkgs       = pacotes_necessarios,
include_R  = TRUE,
user_browser = "electron",
R_version  = paste0(">=", R.version$major, ".", R.version$minor)
)
warnings()
shiny::runApp('Legislacoes-Mais-Militar')
